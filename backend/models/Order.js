const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
    orderId: {
        type: String,
        required: true,
        unique: true,
        index: true,
        description: 'Unique order ID (generated by backend)',
    },
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User',
        required: true,
        index: true,
        description: 'Reference to the user who placed the order',
    },
    products: [{
        productId: {
            type: mongoose.Schema.Types.ObjectId,
            ref: 'Product',
            required: true,
            description: 'Reference to the product in the order item',
        },
        quantity: {
            type: Number,
            required: true,
            min: 1,
            description: 'Quantity of the product in the order item',
        },
        variant: { 
            type: String,
            description: 'Selected variant option at the time of order (e.g., Size: Large)',
        },
        priceAtPurchase: {
            type: Number,
            required: true,
            description: 'Price of the product at the time of purchase (to handle price changes)',
        }
    }],
    transactionHash: {
        type: String,
        required: true,
        unique: true,
        index: true,
        description: 'MetaMask transaction hash for payment verification',
    },
    totalAmountPaid: {
        type: Number,
        required: true,
        min: 0,
        description: 'Total amount paid for the order',
    },
    currency: { 
        type: String,
        default: 'USD',
        description: 'Currency used for the payment (e.g., USD, ETH)',
    },
    paymentMethod: {
        type: String,
        default: 'MetaMask/Crypto',
        description: 'Payment method used for the order (e.g., MetaMask, Credit Card)',
    },
    shippingAddress: {
        fullName: { type: String, trim: true, description: 'Shipping full name' },
        addressLine1: { type: String, trim: true, description: 'Shipping address line 1' },
        addressLine2: { type: String, trim: true, description: 'Shipping address line 2 (optional)' },
        city: { type: String, trim: true, description: 'Shipping city' },
        state: { type: String, trim: true, description: 'Shipping state/province' },
        postalCode: { type: String, trim: true, description: 'Shipping postal code' },
        country: { type: String, trim: true, description: 'Shipping country' },
        phoneNumber: { type: String, trim: true, description: 'Shipping phone number' },
        email: { type: String, trim: true, lowercase: true, description: 'Shipping email' },
    },
    billingAddress: { 
        sameAsShipping: { type: Boolean, default: true, description: 'Billing address same as shipping address' },
    },
    orderDate: {
        type: Date,
        default: Date.now,
        description: 'Date when the order was placed',
    },
    deliveryDate: { 
        type: Date,
        description: 'Estimated or actual delivery date of the order',
    },
    status: {
        type: String,
        enum: ['Pending', 'Paid', 'Processing', 'Shipped', 'Delivered', 'Completed', 'Cancelled', 'Refunded', 'Failed'], // More comprehensive status options
        default: 'Paid',
        description: 'Current status of the order',
    },
    orderNotes: { 
        type: String,
        trim: true,
        description: 'Internal notes about the order (for admin use)',
    },
    customerNotes: {
        type: String,
        trim: true,
        description: 'Notes or comments from the customer during order placement',
    },
    discountApplied: {
        type: Number,
        default: 0,
        description: 'Total discount applied to the order',
    },
    taxApplied: { 
        type: Number,
        default: 0,
        description: 'Total tax applied to the order',
    },
    shippingCost: { 
        type: Number,
        default: 0,
        description: 'Shipping cost for the order',
    },
    trackingNumber: { 
        type: String,
        trim: true,
        description: 'Shipping tracking number (if applicable)',
    },
    shippingCarrier: { 
        type: String,
        trim: true,
        description: 'Shipping carrier (e.g., FedEx, UPS, USPS)',
    },
}, { timestamps: true, collection: 'orders' });

module.exports = mongoose.model('Order', orderSchema);